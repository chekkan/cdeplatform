swagger: "2.0"
info:
  version: 1.0.0
  title: City Data Exchange Platform
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: foo@example.com
    url: http://madskristensen.net
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: platform.citydataexchange.com
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /orders:
    get:
      description: |
        Returns all orders from the system that the user has access to.
      operationId: getOrders
      parameters:
        - name: size
          in: query
          description: maximum number of results to return
          required: false
          type: number
          format: int32
          collectionFormat: csv
          items:
            type: string
        - name: page
          in: query
          description: page number
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: order response
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              type: integer
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      parameters:
        - name: pet
          in: body
          description: Pet to add to the store
          required: true
          schema:
            $ref: '#/definitions/NewPet'
      responses:
        200:
          description: pet response
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: pet response
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: pet deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Pet:
    allOf:
      - $ref: '#/definitions/NewPet'
      - required:
        - id
        properties:
          id:
            type: integer
            format: int64
  NewPet:
    required:
      - name
    properties:
      name:
        type: string
      tag:
        type: string
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  Order:
    required:
      - id
      - credit
      - created
      - modified
      - status
      - payment
    properties:
      id:
        type: string
      credit:
        type: integer
        format: int64
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      status:
        type: string
        enum: 
          - pending
          - approved
          - rejected
      payment:
        $ref: '#/definitions/Payment'
  
  Payment:
    allOf:
      - $ref: '#/definitions/InvoicePayment'
      - required:
        - type
        - data
      - $ref: '#/definitions/PaypalPayment'
      - required:
        - type
        - data
    
  InvoicePayment:
    properties:
      type:
        type: string
        enum:
          - invoice
      data:
        $ref: '#/definitions/InvoicePaymentData'
        
  InvoicePaymentData:
    required:
      - firstName
      - lastName
      - companyName
      - address
      - city
      - country
    properties:
      firstName:
        type: string
      lastName:
        type: string
      companyName:
        type: string
      address:
        type: string
      city:
        type: string
      country:
        type: string
        
  PaypalPayment:
    properties:
      type:
        type: string
        enum:
          - paypal
      data:
        $ref: '#/definitions/PaypalPaymentData'
        
  PaypalPaymentData:
    required:
      - token
    properties:
      token: 
        type: string