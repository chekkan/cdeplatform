swagger: "2.0"
info:
  version: 1.0.0
  title: City Data Exchange Platform
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: foo@example.com
    url: http://madskristensen.net
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: platform.citydataexchange.com
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /datasets/_stats:
    get:
      description: |
        Returns the stats about datasets
      operationId: getDatasetStats
      responses:
        200:
          description: dataset stats response
          schema: 
            $ref: '#/definitions/DatasetStats'
            
  /datasets/{id}/audits:
    get:
      description: |
        Returns the audits for datasets
      operationId: getDatasetStats
      parameters:
        - name: id
          in: path
          description: ID of dataset to fetch
          required: true
          type: string
      responses:
        200:
          description: dataset audits response
          schema: 
            type: array
            items:
              $ref: '#/definitions/DatasetAudit'

  /categories:
    get:
      operationId: getCategories
      responses:
        200:
          description: categories response
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetCategory'
    
    post:
      operationId: postCatergory
      parameters:
        - name: X-Content-Language
          in: header
          description: language of the content
          type: string
      responses:
        202:
          description: categories response
          schema:
            $ref: '#/definitions/DatasetCategory'
            
  /categories/{id}:
    put:
      operationId: putCatergory
      parameters:
        - name: X-Content-Language
          in: header
          description: language of the content
          type: string
        - name: id
          in: path
          type: string
          required: true
          description: category to update
      responses:
        202:
          description: categories response
          schema:
            $ref: '#/definitions/DatasetCategory'
      

  /orders:
    get:
      description: |
        Returns all orders from the system that the user has access to.
      operationId: getOrders
      parameters:
        - name: size
          in: query
          description: maximum number of results to return
          required: false
          type: number
          format: int32
          collectionFormat: csv
          items:
            type: string
        - name: page
          in: query
          description: page number
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: order response
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
          headers:
            X-Total-Count:
              description: Total number of orders in the server
              type: integer
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new order.
      operationId: newOrder
      parameters:
        - name: order
          in: body
          description: Order to create.
          required: true
          schema:
            $ref: '#/definitions/NewOrder'
      responses:
        200:
          description: pet response
          schema:
            $ref: '#/definitions/Order'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /orders/{id}:
    get:
      description: Returns a order based on a single id, if the user has access to the order.
      operationId: find order by id
      parameters:
        - name: id
          in: path
          description: ID of order to fetch
          required: true
          type: string
      responses:
        200:
          description: order response
          schema:
            $ref: '#/definitions/Order'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        
  SmartCityString:
    properties:
      value:
        type: string
      locale:
        type: string
      isDefault:
        type: boolean
        
  DatasetAudit:
    required:
      - id
      - datasetId
      - message
      - timestamp
    properties:
      id:
        type: string
      datasetId:
        type: string
      message:
        type: string
      timestamp:
        type: string
        format: date-time
        
  BasketItem:
    properties:
      datasetId:
        type: string
      name: 
        type: array
        items: 
          $ref: '#/definitions/SmartCityString'
      price:
        type: number
      subscriptionType:
        type: string
        enum:
          - oneTimeDownload
          - yearly
          - monthly
          - weekly
          - free
      supplierName:
        type: string
      datasetUploadFrequeny:
        type: string
        enum:
          - selectFrequency
          - oneTime
          - hourly
          - daily
          - weekly
          - monthly
          - quarterly
          - annually
        
  Order:
    allOf:
      - $ref: '#/definitions/NewOrder'
    required:
      - id
      - items
      - credit
      - created
      - modified
      - status
    properties:
      id:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      status:
        type: string
        enum: 
          - pending
          - approved
          - rejected
        
  NewOrder:
    required:
      - payment
      - items
    properties:
      items:
        type: array
        $ref: '#/definitions/BasketItem'
      credit:
        type: integer
        format: int64
      payment:
        $ref: '#/definitions/Payment'
  
  Payment:
    allOf:
      - $ref: '#/definitions/InvoicePayment'
      - required:
        - type
        - data
      - $ref: '#/definitions/PaypalPayment'
      - required:
        - type
        - data
    
  InvoicePayment:
    properties:
      type:
        type: string
        enum:
          - invoice
      data:
        $ref: '#/definitions/InvoicePaymentData'
        
  InvoicePaymentData:
    required:
      - firstName
      - lastName
      - companyName
      - address
      - city
      - country
    properties:
      firstName:
        type: string
      lastName:
        type: string
      companyName:
        type: string
      address:
        type: string
      city:
        type: string
      country:
        type: string
        
  PaypalPayment:
    properties:
      type:
        type: string
        enum:
          - paypal
      data:
        $ref: '#/definitions/PaypalPaymentData'
        
  PaypalPaymentData:
    required:
      - token
    properties:
      token: 
        type: string
        
  DatasetStats:
    properties:
      dataSize :
        type: number
        
  DatasetCategory:
    required:
      - id
      - name
      - description
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string