swagger: "2.0"
info:
  version: 1.0.0
  title: City Data Exchange Platform  API
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: harish.babu@hitachiconsulting.com
    url: https://citydataexchange.com
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: platform.citydataexchange.com
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /datasets/_stats:
    get:
      tags:
      - dataset
      description: |
        Returns the stats about datasets
      operationId: getDatasetStats
      responses:
        200:
          description: dataset stats response
          schema:
            $ref: '#/definitions/DatasetStats'

  /datasets:
    get:
      description: |
        List of datasets
      operationId: listDatasets
      tags:
      - dataset
      responses:
        200:
          description: datasets array
          schema: 
            type: array
            items:
              $ref: '#/definitions/Dataset'

  /datasets/{id}:
    get:
      description: |
        Returns a specific dataset with the supplied id.
      operationId: getDataset
      tags:
      - dataset
      parameters:
        - name: id
          in: path
          description: ID of the dataset to fetch
          required: true
          type: string
      responses:
        200:
          description: dataset response
          schema:
            $ref: '#/definitions/Dataset'

  /datasets/{id}/audits:
    get:
      description: |
        Returns the audits for datasets
      operationId: getDatasetAudits
      tags:
      - dataset
      parameters:
        - name: id
          in: path
          description: ID of dataset to fetch
          required: true
          type: string
      responses:
        200:
          description: dataset audits response
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetAudit'

  /categories:
    get:
      operationId: getCategories
      tags:
      - category
      responses:
        200:
          description: categories response
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetCategory'

    post:
      operationId: postCatergory
      tags:
      - category
      parameters:
        - name: X-Content-Language
          in: header
          description: language of the content
          type: string
      responses:
        202:
          description: categories response
          schema:
            $ref: '#/definitions/DatasetCategory'

  /categories/{id}:
    put:
      operationId: putCatergory
      tags:
      - category
      parameters:
        - name: X-Content-Language
          in: header
          description: language of the content
          type: string
        - name: id
          in: path
          type: string
          required: true
          description: category to update
      responses:
        202:
          description: categories response
          schema:
            $ref: '#/definitions/DatasetCategory'

  /orders:
    get:
      description: |
        Returns all orders from the system that the user has access to.
      operationId: getOrders
      tags:
      - order
      parameters:
        - name: size
          in: query
          description: maximum number of results to return
          required: false
          type: number
          format: int32
          collectionFormat: csv
          items:
            type: string
        - name: page
          in: query
          description: page number
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: order response
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
          headers:
            X-Total-Count:
              description: Total number of orders in the server
              type: integer
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

    post:
      description: Creates a new order.
      operationId: newOrder
      tags:
      - order
      parameters:
        - name: order
          in: body
          description: Order to create.
          required: true
          schema:
            $ref: '#/definitions/NewOrder'
      responses:
        200:
          description: pet response
          schema:
            $ref: '#/definitions/Order'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /orders/{id}:
    get:
      description: Returns a order based on a single id, if the user has access to the order.
      operationId: findOrderById
      tags:
      - order
      parameters:
        - name: id
          in: path
          description: ID of order to fetch
          required: true
          type: string
      responses:
        200:
          description: order response
          schema:
            $ref: '#/definitions/Order'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Allows the order status to be updated
      operationId: updateOrder
      tags:
      - order
      parameters:
      - name: id
        in: path
        description: Id of the order to update
        required: true
        type: string
      - name: order
        in: body
        description: status of the order
        schema: 
          $ref: '#/definitions/UpdateOrder'
      responses:
        202:
          description: accepted order update

  /umbraco:
    get:
      description: Returns umbraco content list at specified path
      operationId: umbraco list
      tags:
      - umbraco
      parameters:
        - name: path
          in: query
          description: path of content to fetch
          required: true
          type: string
        - name: search
          in: query
          description: text to search
          required: false
          type: string
        - name: from
          in: query
          description: first element to return starting at 1
          required: false
          type: number
        - name: size
          in: query
          description: max number of elements to return
          required: false
          type: number
      responses:
        200:
          description: umbraco collection or object
          schema:
            type: array
            items:
              $ref: '#/definitions/UmbracoContent'
          headers:
            X-Total-Count:
              description: Total number of items in the server
              type: integer
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /umbraco/{id}:
    get:
      description: Returns umbraco content item at specified path
      operationId: umbraco content
      tags:
      - umbraco
      parameters:
        - name: id
          in: path
          description: id of the content to return
          required: true
          type: string
      responses:
        200:
          description: umbraco content object
          schema:
            $ref: '#/definitions/UmbracoContent'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /users:
    get:
      description: Returns umbraco content list at specified path
      operationId: listUsers
      tags:
      - user
      responses:
        200:
          description: user collection or object
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
                
  /transactions:
    get:
      description: Returns paged list of transactions
      operationId: listTransactions
      tags:
      - transaction
      responses:
        200:
          description: transaction collection
          schema:
            $ref: '#/definitions/TransactionCollection'

definitions:
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

  DatasetAudit:
    required:
      - id
      - datasetId
      - message
      - timestamp
    properties:
      id:
        type: string
      datasetId:
        type: string
      message:
        type: string
      timestamp:
        type: string
        format: date-time

  Order:
    allOf:
      - $ref: '#/definitions/UpdateOrder'
    required:
      - id
      - items
      - credit
      - status
      - payment
      - consumer
      - totalVATAmount
      - totalCommissionAmount
      - totalAmount
      - created
      - modified
    properties:
      id:
        type: string
      items:
        type: array
        items:
          $ref: '#/definitions/OrderItem'
      credit:
        type: integer
        format: int64
      payment:
        $ref: '#/definitions/Payment'
      consumer:
        $ref: '#/definitions/Consumer'
      totalVATAmount:
        type: number
      totalCommissionAmount:
        type: number
      totalAmount:
        type: number
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time

  NewOrder:
    required:
      - payment
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/NewOrderItem'
      credit:
        type: integer
        format: int64
      payment:
        $ref: '#/definitions/Payment'
        
  UpdateOrder:
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - pending
          - approved
          - rejected
        
  OrderItem:
    required:
    - deliveryType
    - dataset
    - basePrice
    - vatPercentage
    - vatAmount
    - commissionPercentage
    - commissionAmount
    - amount
    properties:
      deliveryType:
        type: string
        enum:
          - oneTime
          - subscription
      dataset:
          $ref: '#/definitions/DatasetOrderItem'
      basePrice:
        type: number
      vatPercentage:
        type: number
      vatAmount:
        type: number
      commissionPercentage:
        type: number
      commissionAmount:
        type: number
      amount:
        type: number
        
  NewOrderItem:
    properties:
      deliveryType:
        type: string
        enum:
          - oneTime
          - subscription
      dataset:
        $ref: '#/definitions/NewDatasetOrderItem'
          
  DatasetOrderItem:
    allOf:
    - $ref: '#/definitions/NewDatasetOrderItem'
    required:
    - id
    - name
    - description
    - supplier
    properties:
      name:
        type: string
      description:
        type: string
      supplier:
        $ref: '#/definitions/SupplierOrderItem'
        
  NewDatasetOrderItem:
    properties:
      id: 
        type: string
        
  SupplierOrderItem:
    required:
    - id
    - name
    - email
    - company
    properties:
      id:
        type: string
      name:
        type: string
      email:
        type: string
      company:
        $ref: '#/definitions/CompanyOrderItem'
        
  Consumer:
    required:
    - id
    - firstName
    - lastName
    - email
    - company
    properties:
      id:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      company:
        $ref: '#/definitions/CompanyOrderItem'
        
  CompanyOrderItem:
    required:
    - id
    - name
    properties:
      id:
        type: string
      name:
        type: string

  Payment:
    allOf:
      - $ref: '#/definitions/InvoicePayment'
      - $ref: '#/definitions/PaypalPayment'

  InvoicePayment:
    required:
      - type
      - data
    properties:
      type:
        type: string
        enum:
          - invoice
      data:
        $ref: '#/definitions/InvoicePaymentData'

  InvoicePaymentData:
    required:
      - firstName
      - lastName
      - companyName
      - address
      - city
      - country
    properties:
      firstName:
        type: string
      lastName:
        type: string
      companyName:
        type: string
      address:
        type: string
      city:
        type: string
      country:
        type: string

  PaypalPayment:
    required: 
    - type
    - data
    properties:
      type:
        type: string
        enum:
          - paypal
      data:
        $ref: '#/definitions/PaypalPaymentData'

  PaypalPaymentData:
    required:
      - token
    properties:
      token:
        type: string

  Dataset:
    required:
      - id
      - name
      - description
      - frequency
      - status
      - supplier
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      rating:
        type: integer
      frequency: 
        type: string
        enum:
          - once
          - hourly
          - daily
          - weekly
          - monthly
          - yearly
      status:
        type: string
        enum:
          - published
      supplier:
        $ref: '#/definitions/Account'

  DatasetStats:
    properties:
      dataSize :
        type: number

  DatasetCategory:
    required:
      - id
      - name
      - description
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string

  UmbracoContent:
    properties:
      id:
        type: string
      name:
        type: string
        
  Account:
    required:
      - id
      - type
    properties:
      id:
        type: string
      type:
        type: string
        enum:
          - user
          - company

  TransactionCollection:
    type: array
    items:
      $ref: '#/definitions/Transaction'
      
  Transaction:
    properties:
      id:
        type: string
